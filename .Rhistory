\
install.packages(c("nlme", "packrat", "Rcpp", "rsconnect"))
install.packages(c("nlme", "packrat", "Rcpp", "rsconnect"))
install.packages(c("nlme", "packrat", "Rcpp", "rsconnect"))
library("RGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
require(RGtk2)
library("RGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:RGtk2", unload=TRUE)
library("RGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:RGtk2", unload=TRUE)
library("RGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:RGtk2", unload=TRUE)
library("RGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
require(RGtk2)
R.restart
swirl()
require(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls<-lappy(flags,class)
cls<-lapply(flags,class)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list<-sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
unique_vals<-sapply(flags,unique)
unique_vals<-sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
iris
View(iris)
mydata<-subset.data.frame(iris,iris$Species=='virginica')
mean(iris[iris$Petal.Length])
mean(mydata[mydata$Petal.Length])
mean(mydata["Petal.Length"])
mean(mydata[,3])
mean(mydata[,3])
head(mydata)
mean(mydata[mydata$Sepal.Length])
mean(mydata[,mydata$Sepal.Length])
mean(mydata[,$Sepal.Length])
mean(mydata[,Sepal.Length])
mean(mydata[,"Sepal.Length])
""
mean(mydata[,"Sepal.Length"])
mean(mydata[,1])
tapply(iris,iris$Species,mean)
tapply(iris,5,mean)
tapply(iris,iris(,5),mean)
tapply(iris,iris[,5],mean)
tapply(iris,iris$Species,mean,simplify = "TRUE")
tapply(iris$Sepal.Length,iris$Species,mean,simplify = "TRUE")
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
sapply(iris,mean)
apply(iris[,1:4],mean)
apply(iris,mean)
apply(iris,1:4,mean)
?apply
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
class(mtcars)
View(mtcars)
sapply(mtcars,cyl,mean)
split(mtcars,mtcars$cyl)
lappy(mtcars,mean)
lapply(mtcars,mean)
apply(mtcars,2,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl==4, mtcars$hp, mean)
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
a<-tapply(mtcars$hp, mtcars$cyl, mean)
a<-subset(tapply(mtcars$hp, mtcars$cyl, mean),mtcars$cyl==4)
a
remove(a)
a<-subset(tapply(mtcars$hp, mtcars$cyl, mean),mtcars$cyl==4)
a
b<-subset(tapply(mtcars$hp, mtcars$cyl, mean),mtcars$cyl==8)
b
b<-subset(tapply(mtcars$hp, mtcars$cyl, mean),mtcars$cyl==8)
b
a
a<-tapply(mtcars$hp, mtcars$cyl, mean)
a
print(a[,3]-a[,1])
print(a[3]-a[1])
debug(ls)
with(mtcars, tapply(mpg, cyl, mean))
za<<- 17
exit
stop
x
q
za<<- 17
q
q
q
q
q
q
q
q
q
q
q
q
q
qQ
Q
Q
Q
Q
Q
za<<-12
ho<-function(a){}
ho<-function(a){za=a return(za)}
ho<-function(a){za=a return(za)}
ho<-function(a){za=a
return(za)
}
ho(3)
ho<-function(a){
return(za)
}
ho(3)
as<-5
ho<-function(a){
return(as)
}
ho(3)
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
source("cachematrix.R")
source("/ProgrammingAssignment2/cachematrix.R")
source("ProgrammingAssignment2/cachematrix.R")
getwd
getwd()
setwd("~/GitHub/datasciencecoursera")
source("ProgrammingAssignment2/cachematrix.R")
source("ProgrammingAssignment2/cachematrix.R")
print(cacheSolve(as.matrix(1,2,3)))
print(cacheSolve(as.matrix(1,2,3,4,nrow=2,ncol=2)))
print(cacheSolve(c(1,2,3,4,nrow=2,ncol=2)))
print(cacheSolve(c(1,2,3,4),nrow=2,ncol=2)))
print(cacheSolve(c(1,2,3,4),nrow=2,ncol=2))
print(cacheSolve(c(1,2,3,4),nrow=2,ncol=2)))
za=c(1,2,3,4,nrow=2,ncol=2)
class(za)
cacheSolve(za)
za=matrix(c(1,2,3,4,nrow=2,ncol=2))
class(za)
cacheSolve(za)
isrecursive(za)
is.recursive(za)
za
za<-c([1:4])
za<-c(1:4)
za
za<-c(1:4,1:4)
za
za=matrix(c(1,2),c(3,4))
za=matrix(c(1,2),c(3,4),nrow=2,ncol=2)
za
cacheSolve(za)
za<-1,2,3,4
za<-c(1,2,3,4)
cacheSolve(za)
za=matrix(c(1,2),c(3,4),nrow=2,ncol=2)
makeCacheMatrix(za)
cacheSolve(za)
makeCacheMatrix(za)
makeCacheMatrix()
makeCacheMatrix
print(makeCacheMatrix(za))
source("ProgrammingAssignment2/cachematrix.R")
cachemean(za)
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
cachemean(za)
class(za)
za<- list(1,2,3,4)
cachemean(za)
makeVector(za)
cachemean(za)
za<-vector(1,2,3,4)
za<-vector(1,2)
za<-vector(1,2,3)
za<-vector(1:10)
za<-vector(1:10,1)
za<-vector(mode="logical",10)
cachemean(za)
za<-vector(mode="decimal",10)
za<-vector(10,1:10)
?vector
za<-vector(mode="list",10)
cachemean(za)
debug(cachemean)
cachemean(za)
makeVector(za)
debug(makeVector)
makeVector(za)
z <- makeVector()
z$set(1:4)
cachemean(z)
z <- makeVector()
z$set(1:4)
cachemean(z)
cachemean(z)
z<-makeCacheMatrix()
z
z$set(1:4)
cacheSolve(z)
z<-makeCacheMatrix()
class(z)
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
z<-makeCacheMatrix()
?matrix
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
z<-makeCacheMatrix()
z
z$set(1,2,3,4,5,6)
z$set(1:4)
z
debug(cacheSolve)
cacheSolve(z)
?solve
z<-matrix(c(1,2,3,4),nrow=2,ncol=2)
cacheSolve(z)
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
z<-makeCacheMatrix()
z
z$set(1:4)
z$set(1,2,3,4)
z$set(c(1,2,3,4))
z$set(c(1,2,3,4))
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
z$set(c(1,2,3,4))
View(z)
z<-makeCacheMatrix()
z$set(c(1,2,3,4))
z<-makeCacheMatrix()
remove(z)
z<-makeCacheMatrix()
View(z)
class(a)
class(z)
z$set
z
z$set(c(1,2,3,4))
z$set(c(1,2,3,4),nrow=2,ncol=2)
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
z$set(c(1,2,3,4),nrow=2,ncol=2)
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
z$set(c(1,2,3,4),nrow=2,ncol=2)
debug(makeCacheMatrix)
z$set(c(1,2,3,4),nrow=2,ncol=2)
z$set()
z$set
makeCacheMatrix(z)
Ëœ
z$set
z$set()
z$set()
debug(makeCacheMatrix)
z$set()
makeCacheMatrix$set
cacheSolve(z)
debug(cacheSolve)
cacheSolve(z)
makeVector(z)
z$set(1,2,3,4)
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m=makeCacheMatrix(x)
m$get()
print(cachesolve(m))
print(cacheSolve(m))
print(cacheSolve(m))
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
a = rbind(c(1,2), c(3,4))
a <- rbind(c(1,2), c(3,4))
b <- makeCacheMatrix(a)
b$get()
print(cacheSolve(b))
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
getwd()
load("hw1_data.csv",myframe)
load("hw1_data.csv")
mydata<-data.frame()
load("hw1_data.csv",myframe)
load("hw1_data.csv",mydata)
mydata<-read.csv("hw1_data.csv")
View(mydata)
View(mydata)
plot(mydata$ozone,mydata$Temp)
plot(mydata$ozone,mydata$Month)
plot(mydata$month,mydata$Wind)
?plot
plot(mydata$month,mydata$Wind,t="h")
View(mydata)
mydata<-complete.cases(mydata)
mydata<-read.csv("hw1_data.csv")
mydata<-mydata[complete.cases(mydata)]
mydata<-mydata[mydata[,complete.cases(mydata)]
]
mydata<-mydata[mydata[complete.cases(mydata)]
]
mydata<-mydata[,complete.cases(mydata)]
mydata<-mydata[complete.cases(mydata),]
plot(mydata$month,mydata$Wind,t="h")
View(mydata)
plot(mydata)
plot(mydata[,1],mydata[,2])
plot(mydata$Ozone,mydata$Solar.R)
plot(mydata$Ozone,mydata$Wind)
remove(mydata)
install.packages("swirl")
swirl()
require(swirl)
install("XLConnect")
install.packages("XLConnect")
install.packages("XML")
install.packages("HTMLUtils")
require(HTMLUtils)
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
require(swirl)
swirl()
swirl()
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileurl,"/week3/data1.csv",)
download.file(fileurl,"week3/data1.csv",)
data<-read.table("week3/data1.csv",sep=",",header = TRUE)
View(data)
length(data[,data$VAL==24][,1])
length(data[data$VAL==24][,1])
length(data[data$VAL==24,][,1])
length(data[data$VAL==24][,1])
length(data[data$VAL==24][,])
length(data[data$VAL==24][])
length(data[data$VAL==24])
length(data[,data$VAL==24])
length(data[1,data$VAL==24])
length(data[data$VAL==24][,1])
length(data[data$VAL==24][1,])
length(data[data$VAL==24][1,1])
length(data[1,data$VAL==24])
data[1,data$VAL==24]
data[data$VAL==24]
data[data$VAL==24]
subset(data,data$VAL==24)
length(subset(data,data$VAL==24))
length(subset(data,data$VAL==24)[,1])
View(data)
unique(data$FES)
unique(data$FES)
summary(data$FES)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file(fileurl,"week3/data2.xlsx",)
library(xlsx)
install.packages("xlsx")
library(xlsx)
require("rjava")
install.packages("rJava")
library(xlsx)
library(rJava)
library(rJava)
library(rJava)
library(xlsx)
data2<-read.xlsx("week3/data2.xlsx",sheetIndex = 1,header = TRUE)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileurl,"week3/data22.xlsx",)
download.file(fileurl,"week3/data22.xlsx?accessType=DOWNLOAD",)
download.file(fileurl,"week3/data22.xlsx?accessType=DOWNLOAD")
download.file(fileurl,"week3/data22.xlsx")
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx?accessType=DOWNLOAD"
download.file(fileurl,"week3/data22.xlsx")
data2<-read.xlsx("week3/data22.xlsx",sheetIndex = 1,header = TRUE)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileurl,"week3/data22.xlsx", method = "curl"")
)
,))
download.file(fileurl,"week3/data22.xlsx", method = "curl")
download.file(fileurl,"week3/data22.xlsx", method = curl)
download.file(fileurl,"week3/data22.xlsx", method = curlGetHeaders())
download.file(fileurl,"week3/data22.xlsx"
)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileurl,"week3/data22.xlsx"
)
data2<-read.xlsx("week3/data22.xlsx",sheetIndex = 1,header = TRUE)
download.file(fileurl,"week3/data22.xlsx",  mode = "wb")
data2<-read.xlsx("week3/data22.xlsx",sheetIndex = 1,header = TRUE)
dat<-data2[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileurl,"week3/data3.xml",  mode = "wb")
library(XML)
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
library(RCurl)
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
xData <- getURL(fileURL)
xData <- getURL(fileurl)
doc<-xmlTreeParse(xData,useInternal=TRUE)
rootnode<-xmlRoot(doc)
doc<-xmlParse(xData)
fileurl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
rootnode<-xmlRoot(doc)
xmlName(rootnode)
names(rootnode)
rootnode[[1]]
rootnode[[1,1]]
