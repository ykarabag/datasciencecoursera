unique_vals<-sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
iris
View(iris)
mydata<-subset.data.frame(iris,iris$Species=='virginica')
mean(iris[iris$Petal.Length])
mean(mydata[mydata$Petal.Length])
mean(mydata["Petal.Length"])
mean(mydata[,3])
mean(mydata[,3])
head(mydata)
mean(mydata[mydata$Sepal.Length])
mean(mydata[,mydata$Sepal.Length])
mean(mydata[,$Sepal.Length])
mean(mydata[,Sepal.Length])
mean(mydata[,"Sepal.Length])
""
mean(mydata[,"Sepal.Length"])
mean(mydata[,1])
tapply(iris,iris$Species,mean)
tapply(iris,5,mean)
tapply(iris,iris(,5),mean)
tapply(iris,iris[,5],mean)
tapply(iris,iris$Species,mean,simplify = "TRUE")
tapply(iris$Sepal.Length,iris$Species,mean,simplify = "TRUE")
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
sapply(iris,mean)
apply(iris[,1:4],mean)
apply(iris,mean)
apply(iris,1:4,mean)
?apply
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
class(mtcars)
View(mtcars)
sapply(mtcars,cyl,mean)
split(mtcars,mtcars$cyl)
lappy(mtcars,mean)
lapply(mtcars,mean)
apply(mtcars,2,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl==4, mtcars$hp, mean)
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
a<-tapply(mtcars$hp, mtcars$cyl, mean)
a<-subset(tapply(mtcars$hp, mtcars$cyl, mean),mtcars$cyl==4)
a
remove(a)
a<-subset(tapply(mtcars$hp, mtcars$cyl, mean),mtcars$cyl==4)
a
b<-subset(tapply(mtcars$hp, mtcars$cyl, mean),mtcars$cyl==8)
b
b<-subset(tapply(mtcars$hp, mtcars$cyl, mean),mtcars$cyl==8)
b
a
a<-tapply(mtcars$hp, mtcars$cyl, mean)
a
print(a[,3]-a[,1])
print(a[3]-a[1])
debug(ls)
with(mtcars, tapply(mpg, cyl, mean))
za<<- 17
exit
stop
x
q
za<<- 17
q
q
q
q
q
q
q
q
q
q
q
q
q
qQ
Q
Q
Q
Q
Q
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y) {
x <<- y
invrs <<- NULL
}
get <- function() x
setsolv <- function(solv) invrs <<- solv
getsolv <- function() invrs
list(set = set, get = get,
setsolv = setsolv,
getsolv = getsolv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invrs <- x$getsolv()
if(!is.null(invrs)) {
message("getting cached data")
return(invrs)
}
data <- x$get()
invrs <- solv(data, ...)
x$setsolv(invrs)
invrs
}
a <- rbind(c(1,2), c(3,4))
b <- makeCacheMatrix(a)
print(cacheSolve(b))
str(a)
str(b)
a<-c("ali","veli","deli")
str(a)
str(solve)
str(max)
summary(a)
swirl()
require(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = TRUE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select (cran,-time
)
select (cran,-x:-size)
select (cran,-X:-size)
-5:20
-(5:20)
select (cran,-(X:size)
)
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 && r_os == "linux-gnu" )
filter(cran, size > 100500,r_os == "linux-gnu" )
is.na(c(3, 5, NA, 10)).
is.na(c(3, 5, NA, 10))
is.na(!c(3, 5, NA, 10))
is.na!(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_ad)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange,cran2,package,ip_id)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),desc(ip_id))
arrange(cran2,asc(country),desc(r_version),desc(ip_id))
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^10)
mutate(cran3,size_mb=size/2^20, size_gb=size_mb / 2^10)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,
| avg_bytes = mean(size))
summarize(cran,
avg_bytes = mean(size))
load(dplyr)
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<- arrange(top_counts,count())
top_counts_sorted<- arrange(top_counts,count
)
top_counts_sorted<- arrange(top_counts,desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<- arrange(top_unique,desc(unique)
)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,key=sex_class, value = count)
res<-gather(students2,sex,count,key=sex_class, value = count)
res<-gather(students2,sex,count)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(data=res,col=sex_class,into = c("sex","class"))
submit()
submit()
submit()
submit()
submit()
submit()
students3
submit()
submit()
submit()
submit()
students3
submit()
submit()
submit()
submit()
sp
?spread
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
?contains
?Contains
submit()
submit()
sat %>%
select(-contains("total")) %>%
gather(read_male:write_total, key=part_sex, value=count , -score_reange) %>%
### separate()> %>%
print
sat %>%
select(-contains("total")) %>%
gather(key=part_sex, value=count , -score_reange) %>%
### separate()> %>%
print
sat %>%
select(-contains("total")) %>%
gather(key=part_sex, value=count , -score_range) %>%
### separate()> %>%
print
sat %>%
select(-contains("total")) %>%
gather(key=part_sex, value=count , -score_range) %>%
### separate()> %>%
print
submit()
submit()
?separate
sol
submit()
submit()
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day=today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_dateymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
clas(mydate)
class(mydate)
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("19/20/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
ymd_hms("03:22:14")
ymd_hm("03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment,hours=hour(now()), minutes=<minute(now()))
this_moment<-update(this_moment,hours=hour(now()), minutes=minute(now()))
this_moment
getwd
getwd()
getwd()
setwd("~/GitHub")
setwd("~/GitHub/datasciencecoursera")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","week3/file1.csv")
mydata<-read.table("week3/file1.csv",header=TRUE,sep=",")
length(subset(mydata,mydata$VAL=24)[,1])
length(subset(mydata,mydata$VAL==24)[,1])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","week3/file2.xlsx",method="curl")
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(xlsx)
load(xlsx)
load(xls)
library(xlsx)
install("rJava")
install.packages("rJava")
library(rJava)
library(xlsx)
install.packages("xlsx")
library(xlsx)
system("java -version")
system("java -version")
library(xlsx)
library(xlsx)
install.packages('rJava', type='source')
install.packages("rJava", type = "source")
library(rJava)
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rJava", unload=TRUE)
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(rJava)
detach("package:xlsxjars", unload=TRUE)
library("xlsxjars", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(rJava)
library(xlsx)
detach("package:xlsxjars", unload=TRUE)
detach("package:xlsx", unload=TRUE)
install.packages("rJava")
library(rJava)
install.packages("xlsx")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("xlsx")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data<-read.xlsx("week3/file2.xlsx",sheetIndex = 1,header=TRUE)
data
View(data)
dat<-data(18:23,7:15)
data<-read.xlsx("week3/file2.xlsx",sheetIndex = 1,header=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",mode="wb")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","week3/file2.xlsx",mode="wb")
data<-read.xlsx("week3/file2.xlsx",sheetIndex = 1,header=TRUE)
View(data)
dat<-data[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml","week3/file3.xml",method="curl")
install.packages("XML")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
doc<-xmlTreeParse("week3/file3.xml",useInternalNodes = TRUE)
rootNode<-XMLRoot(doc)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[1,1]
xmlSApply(rootNode,xmlValue)
xmlSApply(rootNode,xmlValue)
xmlToDataFrame(doc)
myxml<-xmlToDataFrame(doc)
View(myxml)
?xmlToDataFrame
myxml<-xmlToDataFrame("week3/file3.xml")
View(myxml)
rootNode[1,1]
rootNode[1,q]
rootNode[1,2]
rootNode[1,20]
zipcodes<-xpathSApply(doc,"//li[@class='zipcode]",xmlValue)
zipcodes<-xpathSApply(doc,"//li[@class='zipcode']",xmlValue)
names(rootNode)
zipcodes<-xpathSApply(doc,"//row",xmlValue)
zipcodes<-xpathSApply(doc,"//row/zipcode",xmlValue)
length(zipcodes)
length(zipcodes[zipcodes==4])
length(zipcodes[zipcodes==21231])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","week3/file4.csv")
?fread
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
myobj<-read.csv("week3/file4.csv",header = TRUE,sep = ",")
View(myxml)
View(myobj)
myobj<-read.csv("week3/file4.csv",header = TRUE,sep = ",")
install.packages("data.table")
library(data.table)
DT<-as.data.table(myobj)
class(DT)
class(myobj)
DT<-read.csv("week3/file4.csv",header = TRUE,sep = ",")
class(DT)
DT<-data.table()
DT<-read.csv("week3/file4.csv",header = TRUE,sep = ",")
class(DT)
DT<-data.table()
class(DT)
DT<-as.data.table(myobj)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
system.time()
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
dat=read.xlsx("week3/file2.xlsx",sheetIndex = 1)
dat<-dat[18:23,7;15]
dat<-dat[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
dat
