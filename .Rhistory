y[1:152]
x
y<-x
y
y<-x[x[1]>31]
y
y<-x[x[1]>1]
y
y
y<-x[x>1]
y
y<-x[>1]
x[1,2]
y<-x[x[1:153,1]>31
y
y<-x[x[1:153,1]>31]
y<-x[x[,1]>31]
y<-x[1:153,1>31]
y
y[1]
y[0]
x[1,]
x[,1]
y<-x[x[,1]>31]
y<-x[,1]>31
y
y<-x[x[,1]>31]
y<-x[,1x[,1]>31]
y<-x[,1,x[,1]>31]
y
y<-x[,1:6,x[,1]>31]
y
y<-x[x[,1]>31]
y<-x[x[,1]>31]
y<-x[x[1:153,1]>31]
x[1]
y<-x[x[1,]>31]
y
y[1]
y<-x[x[1,]>31]
y[1]
y[2]
y[4]
y<-x[x[1,1:153]>31]
y<-x[x[1,1]>31]
y
y<-x[x[1]>31]
y
y[1]
y[2]
y[23
y[3]
y[3}
y[3]
y[4]
y[5]
y[6]
y[6,1]
y<-x[x[1,]>31]
y[3,1]
y<-x[x[1,]>31]
y[1,1]
attributes(x)
attributes(y)
y<-x[x[1,]>31]
attributes(y)
y as.data.frame()
as.data.frame(y)
as.data.frame(y[1,1])
y=data.frame
()
sdf
y=data.frame()
y<-x
y
y<-x[x[1]>31]
y
y<-y[y[4]>90]
y
y<-x
y
y<-y[$Ozone>31]
y<-y[y$Ozone>31]
y<-y["Ozone">31]
y
y<-x
y<-subset(y,y[1,]>31)
y
y<-subset(y,y[1]>31)
y
y<-subset(y,y[4]>90)
y
mean(y[2])
mean(y[2,])
mean(y[,2])
mean(y[2,1:5])
mean(y)
y<-x
mean(y[4,])
mean(y[4])
mean(y[2])
mean(y[,2])
mean(y[2,])
mean(y[2,1:153])
mean(y[2,2]
)
mean(y(2,2:3))
mean(y[2,2:3])
mean(y[1,2:3])
y[1,1:3]
y[,4]
y<-x
y<-y[y[,4]>90]
y<-y[y[1:153,4]>90]
y[1:153,4]>90
y[,4]>90
y[y[,4]>90]
y[[y[,4]>90]]
y["Ozone">90]
y[$Ozone>90]
y[y$Ozone>90]
y<-x
y<- subset(y.df, y[,4]>90)
attributes(y)
str(x)
y<-x
y<-y[,4]
y
y
y<-x
y<-y[y[,4]>90]
y<-y[y$Temp[]>90]
y<-y[y$Temp[1:153]>90]
y$Temp[1:153]>90
y<-x
y<-subset.matrix(x,Ozone>31 & Temp>90)
y<-subset.matrix(x,$Ozone>31 & Temp>90)
y<-subset.matrix(x,x$Ozone>31 & Temp>90)
y<-subset.matrix(x,x$Ozone>31 & x$Temp>90)
y
mean(y[,2])
y<-subset.matrix(x,x$Month=6)
y<-subset.matrix(x,x$Month==6)
y
mean(y[,4])
y<-subset.matrix(x,x$Month==5)
max(y[,1])
y<-complete.cases((y))
max(y[,1])
max(y)
max(y[1])
max(y[2])
y
y<-subset.matrix(x,x$Month==5)
y
y<-y[complete.cases((y))]
y<-y[complete.cases(y)]
y<-y[complete.cases(y[])]
y<-y[complete.cases(y[,])]
y<-y[complete.cases(y)]
y<-subset.matrix(x,x$Month==5)
good<-complete.cases(y)
y[good]
y<-subset.matrix(x,x$Month==5)
good<-complete.cases(y[,])
y[good]
good
y<-subset.matrix(x,x$Month==5)
good<-complete.cases(y[1,])
y[good]
good<-complete.cases(y[,1])
y[good]
y[,good]
y[good,]
y<-y[,good]
max(y[,good])
y[good,]
z<-y[good]
as.data.frame(y[good])
as.data.frame(y[good,1,1])
as.data.frame(y[good,1])
as.data.frame(y[good,2])
y[good,1]
max(y[good,1])
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
`
z
sd
s;
<
<-
''
x
==
''
§
§
§
fs
hfjg
gfk
hl
jkh;k
l;;l
'l;'
"L;/"
l;"
[po'op"
\p=
0[]
z
z,555,z
c(z,555,z)
z*2+100\
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd
getwd()
ls()
x<-9
ls()
list.files()
?list.files
ardgs(list.files())
args(list.files())
args(list
)
list.files.args()
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.creat("myTest.R")
file.create("myTest.R")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info"mytest.r"
file.info("mytest.r")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R",folder1)
file.path(folder1)
getwd()
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink(("testdir"))
unlink(("testdir"),recursive=TRUE)
unlink("testdir"),recursive=TRUE)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
:
?:
?'?'
?`:`
seq(1,20)
seq(1,20,by=0.5)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name="Yigit"
my_name=c(my_char, "Yigit")
my_name
paste(my_name,collapse+" ")
paste(my_name,collapse=" ")
paste("Hello","world!",sep" ")
paste("Hello","world!",sep=" ")
paste (1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x *3
y <- rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_datra
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y > 0]
x[x > 0]
-- x[!is.na(x) & x >0]
x[!is.na(x) & x > 0]
x[3,5,7]
x[c(3,5,7]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","narf")
names(vect2) <- c("foo","bar","narf")
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20,nrow=4, ncol=1)
my_matrix2 <- matrix(1:20,nrow=4, ncol=1)
my_matrix2 <- matrix(data=1:20,nrow=4, ncol=1)
my_matrix2 <- matrix(data=1:20,nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind (parients,my_matrix)
cbind (patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
j
my_data
colnames(my_data) <- cnames
my_data
swirl()
TRUE == TRUE
(false == true) == FALSE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=
10
5!=7
not(5==7)
!(5==7)
FALSE & FALS
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,FALSE)
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(deviance,c(1.4,3.6,7.9,8.8))
evaluate(sum,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste('Programming,'is','fun')
paste('Programming','is','fun!')
submit
submit()
telegram("Hello Boy!")
submit()
submit()
mad_libs(place="Dubai,adjective="Spins",noun="bottle")
mad_libs(place="Dubai",adjective="Spins",noun="bottle")
submit()
submit()
%p%("I","Love","R")
"I" %p% "Love" %p% "R"
"I" %p% "Love" %p% "R!"
"I" %p% "love" %p% "R!"
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3,"%B,%d,%Y,%H:%M")
strptime(t3,"%B,%d,%Y %H:%M")
strptime(t3,"%B %d,%Y %H:%M")
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
getwd()
pollutantmean <- function(directory, pollutant, id=1:332){}
pollutantmean <- function(directory, pollutant, id=1:332){}
s
directory<-getwd
()+"\\"
directory<-getwd()
directory
directory<-getwd()||"\\\"
fd
df
;'p['
exit
&&&&
sdfd
fdf
fgdf
gdfg12§
11§12
§12342
34567io68iou.khj
,gnc v
x
csffes
print()
;
;;;
><
-->
)
myFunction <- function(x) {
